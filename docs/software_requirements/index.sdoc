[DOCUMENT]
TITLE: Zephyr Software Requirements
REQ_PREFIX: ZEP-

[GRAMMAR]
IMPORT_FROM_FILE: software_requirements.sgra

[DOCUMENT_FROM_FILE]
FILE: hw_arch_interface.sdoc

[DOCUMENT_FROM_FILE]
FILE: c_library.sdoc

[DOCUMENT_FROM_FILE]
FILE: device_driver_api.sdoc

[DOCUMENT_FROM_FILE]
FILE: exception_and_error_handling.sdoc

[DOCUMENT_FROM_FILE]
FILE: system_initialization.sdoc

[DOCUMENT_FROM_FILE]
FILE: file_system.sdoc

[DOCUMENT_FROM_FILE]
FILE: interrupts.sdoc

[DOCUMENT_FROM_FILE]
FILE: logging.sdoc

[DOCUMENT_FROM_FILE]
FILE: memory_protection.sdoc

[DOCUMENT_FROM_FILE]
FILE: memory_objects.sdoc

[DOCUMENT_FROM_FILE]
FILE: data_passing.sdoc

[SECTION]
TITLE: Mutex

[REQUIREMENT]
UID: ZEP-91
STATUS: Draft
TYPE: Functional
COMPONENT: Mutex
TITLE: Mutex Kernel Object
STATEMENT: >>>
The Zephyr RTOS shall support resource synchronization. (Note synchronization can be for memory access, and mutex may be one implementation, but not the only one).
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want to be able to sychonize threads when accessing common resources, where the thread shall have the option to:
- wait eternally until the resources becomes available.
- immediately return with a negative message if the resource is not available and allow the thread to continue.
- wait for a given time for the resource to become available or return with a negative message.
<<<
REVIEW_COMMENT: >>>
Concern over phrase recursive.  What is it MUTEXing? Memory Management?
<<<

[/SECTION]

[DOCUMENT_FROM_FILE]
FILE: power_management.sdoc

[DOCUMENT_FROM_FILE]
FILE: thread_communication.sdoc

[DOCUMENT_FROM_FILE]
FILE: thread_scheduling.sdoc

[DOCUMENT_FROM_FILE]
FILE: threads.sdoc

[DOCUMENT_FROM_FILE]
FILE: timers.sdoc

[DOCUMENT_FROM_FILE]
FILE: tracing.sdoc
