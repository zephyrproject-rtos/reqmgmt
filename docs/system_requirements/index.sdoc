[DOCUMENT]
TITLE: Zephyr System Requirements
REQ_PREFIX: ZEP-

[GRAMMAR]
IMPORT_FROM_FILE: system_requirements.sgra

[REQUIREMENT]
UID: ZEP-1
STATUS: Draft
TYPE: High Level
COMPONENT: Hardware Architecture Interface
TITLE: Architecture Layer Interface
STATEMENT: >>>
The Zephyr RTOS shall provide a framework to communicate with a set of hardware architectural services.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-127

[REQUIREMENT]
UID: ZEP-3
STATUS: Draft
TYPE: High Level
COMPONENT: Hardware Architecture Interface
TITLE: Support multiprocessor management
STATEMENT: >>>
The Zephyr RTOS shall support symmetric multiprocessing on multiple cores.
<<<
REVIEW_COMMENT: >>>
From the Docs: No special application code needs to be written to take advantage of this feature
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-1
- TYPE: Parent
  VALUE: ZEP-128

[REQUIREMENT]
UID: ZEP-2
STATUS: Draft
TYPE: High Level
COMPONENT: C Library
TITLE: Support Subset of Standard C Library
STATEMENT: >>>
The Zephyr RTOS shall support a subset of the standard C library.
<<<
REVIEW_COMMENT: >>>
Can we limit the type of C library implementations? Testing might be hell if we do not limit ourselves to the ones defined? Like "minimal libc" and "newlib". Will it make sense to pull minimal Libc into the certification scope?

Clarification: Would prefer to cover the scope part first. Talking about the hooks which apply to each C Library. Open, Close, Diff. Hooks that are OS dependent. C or Library dependent. ref https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/newlib/libc-hooks.c

TBD: The requirement needs refinement.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-129

[REQUIREMENT]
UID: ZEP-36
STATUS: Draft
TYPE: High Level
COMPONENT: Device Drivers
TITLE: Device Driver Abstraction
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for managing device drivers and peripherals.
<<<
REVIEW_COMMENT: >>>
TBD: Title seems to need refinement. Also, this requirement's user story seems to be identical to that of ZEP-1.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-130

[REQUIREMENT]
UID: ZEP-37
STATUS: Draft
TYPE: High Level
COMPONENT: Exception and Error Handling
TITLE: Fatal error and exception handling
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for error and exception handling.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-131

[REQUIREMENT]
UID: ZEP-38
STATUS: Draft
TYPE: High Level
COMPONENT: File Systems
TITLE: Common File system operation support
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for managing file system access.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-132

[REQUIREMENT]
UID: ZEP-39
STATUS: Draft
TYPE: High Level
COMPONENT: Interrupts
TITLE: Interrupt Service Routine
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for interrupt management.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-133

[REQUIREMENT]
UID: ZEP-40
STATUS: Draft
TYPE: High Level
COMPONENT: Logging
TITLE: Logging
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for logging events.
<<<
REVIEW_COMMENT: >>>
Nicole: TBD: we need to have logging in the safety scope?
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-134

[REQUIREMENT]
UID: ZEP-41
STATUS: Draft
TYPE: High Level
COMPONENT: Memory Management
TITLE: Memory Management framework
STATEMENT: >>>
The Zephyr RTOS shall support a memory management framework.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-135

[REQUIREMENT]
UID: ZEP-42
STATUS: Draft
TYPE: High Level
COMPONENT: Power Management
TITLE: Power Management
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to control hardware power states.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-136

[SECTION]
TITLE: Multi core and SMP

[REQUIREMENT]
UID: ZEP-44
STATUS: Draft
TYPE: High Level
COMPONENT: SMP and Multi core
TITLE: Multiple CPU scheduling
STATEMENT: >>>
The Zephyr RTOS shall support scheduling of threads on multiple hardware CPUs.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-137

[REQUIREMENT]
UID: ZEP-4
STATUS: Draft
TYPE: High Level
COMPONENT: SMP and Multi core
TITLE: Scheduling
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to assign a thread to a specific CPU.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-138

[/SECTION]

[SECTION]
TITLE: Thread Synchronization

[REQUIREMENT]
UID: ZEP-43
STATUS: Draft
TYPE: High Level
COMPONENT: Mutex
TITLE: Mutex
STATEMENT: >>>
The Zephyr RTOS shall provide an interface for managing communication between threads.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-139

[REQUIREMENT]
UID: ZEP-99
STATUS: Draft
TYPE: High Level
COMPONENT: Semaphore
TITLE: Counting Semaphore
STATEMENT: >>>
The system shall implement a semaphore synchronization primitive for coordinating access to shared resources among multiple threads.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-140

[/SECTION]

[SECTION]
TITLE: Threads

[REQUIREMENT]
UID: ZEP-123
STATUS: Draft
TYPE: High Level
COMPONENT: Threads
TITLE: Thread support
STATEMENT: >>>
The Zephyr RTOS shall support threads.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to have support for the kernel objects named threads for processing work.
<<<

[REQUIREMENT]
UID: ZEP-5
STATUS: Draft
TYPE: High Level
COMPONENT: Threads
TITLE: Thread management
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for managing multiple threads of execution.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to manage the execute of multiple threads with different priorities.
<<<
REVIEW_COMMENT: >>>
TBD: Nothing about priorities...
<<<

[REQUIREMENT]
UID: ZEP-122
STATUS: Draft
TYPE: High Level
COMPONENT: Threads
TITLE: Thread priority
STATEMENT: >>>
Threads shall have a priority.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to give my threads different priorities for execution.
<<<

[/SECTION]

[REQUIREMENT]
UID: ZEP-6
STATUS: Draft
TYPE: High Level
COMPONENT: Timers
TITLE: Timers
STATEMENT: >>>
The Zephyr RTOS shall provide a framework for managing time-based events.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to start, suspend, resume and stop timers which shall trigger an event on a set expiration time.
<<<

[REQUIREMENT]
UID: ZEP-7
STATUS: Draft
TYPE: High Level
COMPONENT: Tracing
TITLE: Tracing
STATEMENT: >>>
Zepyhr shall provide a framework mechanism for tracing low level system operations  (NOTE: system calls, interrupts, kernel calls, thread, synchronization, etc.).
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to trace different OS operations.
<<<
REVIEW_COMMENT: >>>
TBD: What are low level system operations in this context?
<<<
