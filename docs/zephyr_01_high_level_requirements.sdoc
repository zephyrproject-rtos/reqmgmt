[DOCUMENT]
TITLE: Zephyr High Level Requirements
REQ_PREFIX: ZEP-

[GRAMMAR]
ELEMENTS:
- TAG: REQUIREMENT
  FIELDS:
  - TITLE: UID
    TYPE: String
    REQUIRED: False
  - TITLE: STATUS
    TYPE: String
    REQUIRED: False
  - TITLE: TYPE
    TYPE: String
    REQUIRED: False
  - TITLE: COMPONENT
    TYPE: String
    REQUIRED: False
  - TITLE: TITLE
    TYPE: String
    REQUIRED: False
  - TITLE: STATEMENT
    TYPE: String
    REQUIRED: False
  - TITLE: USER_STORY
    TYPE: String
    REQUIRED: False
  - TITLE: DISCUSSION_DATE
    TYPE: String
    REQUIRED: False
  - TITLE: REVIEW_COMMENT
    TYPE: String
    REQUIRED: False
  RELATIONS:
  - TYPE: Parent

[REQUIREMENT]
UID: ZEP-1
STATUS: Draft
TYPE: High Level
COMPONENT: Hardware Architecture Interface
TITLE: Architecture Layer Interface
STATEMENT: >>>
Zephyr shall provide a framework to communicate with a set of hardware architectural services.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to easily switch my application to a different MCU architecture (x86, ARM Cortex-M/A, RISCV etc.).
<<<
DISCUSSION_DATE: >>>
2022/3/30 - ok - pf
<<<

[REQUIREMENT]
UID: ZEP-3
STATUS: Draft
TYPE: High Level
COMPONENT: Hardware Architecture Interface
TITLE: Support multiprocessor management
STATEMENT: >>>
Zephyr shall support symmetric multiprocessing on multiple cores.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to use Zephyr OS on multi core (SMP-)MCUs/MPUs.
<<<
DISCUSSION_DATE: >>>
TBD: Still need to articulate the capabilities explicitly.
<<<
REVIEW_COMMENT: >>>
From the Docs: No special application code needs to be written to take advantage of this feature
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-1

[REQUIREMENT]
UID: ZEP-2
STATUS: Draft
TYPE: High Level
COMPONENT: C Library
TITLE: Support Subset of Standard C Library
STATEMENT: >>>
Zephyr shall support a subset of the standard C library.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to have a selection of standard C library implementations e.g. a full extend and a minimal with a smaller footprint or a particular fast executing implementation.
<<<
DISCUSSION_DATE: >>>
We needed to do a subset description, and need to be specific about the subset.
<<<
REVIEW_COMMENT: >>>
Can we limit the type of C library implementations? Testing might be hell if we do not limit ourselfes to the ones defined? Like "miminal libc" and "newlib". Will it make sense to pull miminal Libc into the certification scope?

Clarification: Would prefer to cover the scope part first. Talking about the hooks which apply to each C Library. Open, Close, Diff. Hooks that are OS dependent. C or Library dependent. ref https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/newlib/libc-hooks.c

TBD: The requirement needs refinement.
<<<

[REQUIREMENT]
UID: ZEP-35
STATUS: Draft
TYPE: High Level
COMPONENT: Utilities Library - Data Structures
TITLE: Data Structures Library Utilities
STATEMENT: >>>
Zephyr shall provide common container data structures as library utilities   (ring buffer, linked list, red black trees, ....   see document from Anas)
<<<
USER_STORY: >>>
As a Zepyhr OS developler (user) I do not want to implement common software patterns multiple time in each module again, but make use of a common library which provides it.
<<<
DISCUSSION_DATE: >>>
AI: TBD: Need to be reworked;  split into several requirements;   Library utility shall provide red-black,   shall provide ...   .   Call "Utility Libraries"
<<<
REVIEW_COMMENT: >>>
Possible API - It's ambiguous what is meant by common container data structures as library ulitileis.... - get pointer to code.   (Single linked list, double linked list, ....)

Clarification: There are many files. Linked list, ring buffer, ...). This is an implementation. Need to look at scope. Doesn't need to be a high level requirement
<<<

[REQUIREMENT]
UID: ZEP-36
STATUS: Draft
TYPE: High Level
COMPONENT: Device Driver API
TITLE: Device Driver Abstracting
STATEMENT: >>>
Zephyr shall provide a framework for managing device driver behavior (note: device drivers includes peripherals).
<<<
USER_STORY: >>>
As a Zephyr OS user I want my application to be portable between different MCU architectures (ARM Cortex-M/A, Intel x86, RISCV etc.) and MCU vendors (STM, NXP, Intel, etc.) without having to change the MCU peripherals access.
<<<
DISCUSSION_DATE: >>>
2022/3/30 - ok - pf
<<<
REVIEW_COMMENT: >>>
TBD: Title seems to need refinement. Also, this requirement's user story seems to be identical to that of ZEP-1.
<<<

[REQUIREMENT]
UID: ZEP-37
STATUS: Draft
TYPE: High Level
COMPONENT: Exception and Error Handling
TITLE: Fatal error and exception handling
STATEMENT: >>>
The Zephyr kernel shall provide a framework for error and exception handling.
<<<
USER_STORY: >>>
As a Zephyr OS user I want errors and exeptions to handled and react according to my applications requirements (e.g. reach/establish the applications safey state).
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pf
<<<

[REQUIREMENT]
UID: ZEP-38
STATUS: Draft
TYPE: High Level
COMPONENT: File Systems
TITLE: Common File system operation support
STATEMENT: >>>
Zephyr shall provide a framework for managing file system access.
<<<
USER_STORY: >>>
As a Zephyr OS user I want a posix / c like file system access to store data.
<<<
DISCUSSION_DATE: >>>
TBD: 2022/4/13 - ok - p? - depends on set of expectations
<<<

[REQUIREMENT]
UID: ZEP-39
STATUS: Draft
TYPE: High Level
COMPONENT: Interrupts
TITLE: Interrupt Service Routine
STATEMENT: >>>
Zephyr shall provide a framework for interrupt management.
<<<
USER_STORY: >>>
As a Zephyr OS user I want interrupts to be handled sychronously in response to a hardware or software interrupt request with a minimum latency, preemtping threads and, as far as the hardware allows, lower priority interrupt service routines.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<

[REQUIREMENT]
UID: ZEP-40
STATUS: Draft
TYPE: High Level
COMPONENT: Logging
TITLE: Logging
STATEMENT: >>>
Zephyr shall provide a framework for logging events.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to log application defined events as well as framework exceptions.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<
REVIEW_COMMENT: >>>
Nicole: TBD: we need to have logging in the safety scope?
<<<

[REQUIREMENT]
UID: ZEP-41
STATUS: Draft
TYPE: High Level
COMPONENT: Memory Management
TITLE: Memory Management framework
STATEMENT: >>>
Zephyr shall support a memory management framework.
<<<
USER_STORY: >>>
As a Zephyr OS user I want memory to be allocated and protected to my application threads preventing mistakenly access to foreign memory as far as the hardware allows.
<<<
DISCUSSION_DATE: >>>
2022/10/25 - ok
<<<

[REQUIREMENT]
UID: ZEP-42
STATUS: Draft
TYPE: High Level
COMPONENT: Power Management
TITLE: Power Management
STATEMENT: >>>
Zephyr shall provide an interface to control hardware power states.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to control the power mode of the MCU and its peripherals to take advantage of the hardward features and to be able to implement low power or battery driven long life applications.
<<<
DISCUSSION_DATE: >>>
2022/5/25 - ok pf-ok
<<<

[REQUIREMENT]
UID: ZEP-43
STATUS: Draft
TYPE: High Level
COMPONENT: Thread Communication
TITLE: Mutex
STATEMENT: >>>
Zephyr shall provide an interface for managing communcation between threads.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to able to exchange information between threads in a thread-safe manner guaranteeing data consistence.
<<<
DISCUSSION_DATE: >>>
2022/5/25 - ok  - pf-ok
<<<

[REQUIREMENT]
UID: ZEP-44
STATUS: Draft
TYPE: High Level
COMPONENT: Thread Mapping (should it just be scheduling)
TITLE: Multiple CPU scheduling
STATEMENT: >>>
Zephyr shall support scheduling of threads on multiple hardware CPUs.
<<<
USER_STORY: >>>
As a Zephyr OS user I want Zephyr OS to run on MCUs/CPUs with one or more CPU cores.
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<

[REQUIREMENT]
UID: ZEP-4
STATUS: Draft
TYPE: High Level
COMPONENT: Scheduling
TITLE: Scheduling
STATEMENT: >>>
Zephyr shall provide an interface to assign a thread to a specific CPU.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to control which thread will run on which CPU.
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<
REVIEW_COMMENT: >>>
TBD: The statement contains two separate statements.
<<<

[SECTION]
TITLE: Threads

[REQUIREMENT]
UID: ZEP-123
STATUS: Draft
TYPE: High Level
COMPONENT: Threads
TITLE: Thread support
STATEMENT: >>>
Zephyr shall support threads.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to have support for the kernel objects named threads for processing work.
<<<

[REQUIREMENT]
UID: ZEP-5
STATUS: Draft
TYPE: High Level
COMPONENT: Threads
TITLE: Thread management
STATEMENT: >>>
Zephyr shall provide a framework for managing multiple threads of execution.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to manage the execute of multiple threads with different priorities.
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<
REVIEW_COMMENT: >>>
TBD: Nothing about priorities...
<<<

[REQUIREMENT]
UID: ZEP-122
STATUS: Draft
TYPE: High Level
COMPONENT: Threads
TITLE: Thread priority
STATEMENT: >>>
Threads shall have a priority.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to give my threads different priorities for execution.
<<<

[/SECTION]

[REQUIREMENT]
UID: ZEP-6
STATUS: Draft
TYPE: High Level
COMPONENT: Timers
TITLE: Timers
STATEMENT: >>>
Zephyr shall provide a framework for managing time-based events.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to start, suspend, resume and stop timers which shall trigger an event on a set expiration time.
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<
REVIEW_COMMENT: >>>
TBD: Do we need requirements on scheduling latency?
<<<

[REQUIREMENT]
UID: ZEP-7
STATUS: Draft
TYPE: High Level
COMPONENT: Tracing
TITLE: Tracing
STATEMENT: >>>
Zepyhr shall provide a framework mechanism for tracing low level system operations  (NOTE: system calls, interrupts, kernel calls, thread, synchronization, etc.).
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to trace different OS operations.
<<<
DISCUSSION_DATE: >>>
Moved
<<<
REVIEW_COMMENT: >>>
TBD: What are low level system operations in this context?
<<<
